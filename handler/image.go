package handler

import (
	"bytes"
	"context"
	"image/png"
	"log"
	"os"

	"go.mau.fi/whatsmeow"
	waProto "go.mau.fi/whatsmeow/binary/proto"
	"go.mau.fi/whatsmeow/types"
	"go.mau.fi/whatsmeow/types/events"
	"google.golang.org/protobuf/proto"
)

func ImageHandler(client *whatsmeow.Client, v *events.Message, to types.JID) {
	// commands.DallE(msg)

	// Open Image file
	file, err := os.Open("img/generated/imageGenerated.png")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	// Decode the image
	img, err := png.Decode(file)
	if err != nil {
		panic(err)
	}
	// Get the image bytes
	var buf bytes.Buffer
	err = png.Encode(&buf, img)
	if err != nil {
		panic(err)
	}
	bytes := buf.Bytes()

	/// Upload image
	resp, err := client.Upload(context.Background(), bytes, whatsmeow.MediaImage)
	if err != nil {
		panic(err)
	}
	imageMsg := &waProto.ImageMessage{
		Caption:       proto.String("Image generated by AI !!"),
		Mimetype:      proto.String("image/png"),
		Url:           &resp.URL,
		DirectPath:    &resp.DirectPath,
		MediaKey:      resp.MediaKey,
		FileEncSha256: resp.FileEncSHA256,
		FileSha256:    resp.FileSHA256,
		FileLength:    &resp.FileLength,
	}

	// Send image to target
	_, err = client.SendMessage(context.Background(), to, &waProto.Message{
		ImageMessage: imageMsg,
	})
	if err != nil {
		log.Fatalf("Error sending image to target :: %v\n", err)
	}
}

// Upload uploads the given attachment to WhatsApp servers.
//
// You should copy the fields in the response to the corresponding fields in a protobuf message.
//
// For example, to send an image:
//
//	resp, err := cli.Upload(context.Background(), yourImageBytes, whatsmeow.MediaImage)
//	// handle error
//
//	imageMsg := &waProto.ImageMessage{
//		Caption:  proto.String("Hello, world!"),
//		Mimetype: proto.String("image/png"), // replace this with the actual mime type
//		// you can also optionally add other fields like ContextInfo and JpegThumbnail here
//
//		Url:           &resp.URL,
//		DirectPath:    &resp.DirectPath,
//		MediaKey:      resp.MediaKey,
//		FileEncSha256: resp.FileEncSHA256,
//		FileSha256:    resp.FileSha256,
//		FileLength:    &resp.FileLength,
//	}
//	_, err = cli.SendMessage(context.Background(), targetJID, &waProto.Message{
//		ImageMessage: imageMsg,
//	})
//	// handle error again
